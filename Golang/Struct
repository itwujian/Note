Struct (结构体)

1. 结构体是复合类型（composite types），也是值类型，因此可以通过 new 函数来创建。

2. 结构体定义

   type myStruct struct {
    field1 type1
    field2 type2
    ...
   }

   简单的结构体也可以定义为：type T struct {a, b int}
   
   结构体的字段可以是任何类型，甚至是结构体本身，也可以是函数或者接口。
  
 3. 结构体的声明与初始化
 
    3.1 使用new的方式，使用 new 函数给一个新的结构体变量分配内存，它返回指向已分配内存的指针。
        
        var t *myStruct = new(myStruct)
        
        t := new(myStruct)
        
        或者：var t *myStruct
              t = new(myStruct)
              
     3.2 直接声明：
     
            var t myStruct
         声明也会给 t 分配内存，并零值化内存。
         
     3.3 初始化结构体实例
         
           ms := &struct1{10, 15.5, "Chris"}  // 此时ms的类型是 *struct1
       或者：
          var ms struct1
          ms = struct1{10, 15.5, "Chris"} 
         
          表达式 new(Type) 和 &Type{} 是等价的。
          
          初始化方式：
              type Interval struct {
                  start int
                 end   int
              }
              
          intr := Interval{0, 3}       //结构体类型
          intr := Interval{end:5, start:1}  
          intr := Interval{end:5}   
          
          intr := &Interval{end:5}   //指针类型
          
          Go 语言中，结构体和它所包含的数据在内存中是以连续块的形式存在的。
 
 4. 结构体嵌套
 
      举例1： 双向链表
          
          type Node struct{
              pre  *Node
              next *Node
              date  int
          }
      
      举例2： 二叉树
          
          type Tree struct{
              left  *Tree
              right *Tree
              data  int
          }
                 
  5. 结构体工厂
  
     type File struct {
         fd      int     // 文件描述符
         name    string  // 文件名
     }
 
    func NewFile(fd int, name string) *File {                           func NewFile(fd int, name string) *File {
        if fd < 0 {                                                         if fd < 0 {
            return nil                                                           return nil
        }                                                                  }
        return &File{fd, name}                                             file = new File(fd,name)
    }                                                                      return file
                                                                       }
   6. 结构体的匿名字段以及匿名结构体
   
      6.1 结构体的匿名字段
       
           type A struct {
	            B              //匿名字段的使用方式
	            m int
           }
 
          type B struct {
             	n int
           }
 
         func (b *B) my_print() {
	           fmt.Printf("print B.n=%d\n", b.n)
         }
 
	      a := &A{B{2}, 3}
	      fmt.Printf("A.n=%d, A.m=%d\n", a.n, a.m)
	      a.my_print()

         B是结构体A的匿名字段；所以B的成员n对于结构体A来说相当于是A自己的成员变量a.n，而且，B的方法也是A的方法。
         
      6.2 匿名结构体
      
          
      
   
